# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StrictGeoreferencer
                                 A QGIS plugin
 This plugin allows user to georeference any image with the help of reference points.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-26
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Kolchin S.
        email                : step4in@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.pyx
from .resources import *
# Import the code for the dialog
from qgis.PyQt.QtWidgets import QDialog
from qgis.core import QgsMapLayerProxyModel
from qgis.gui import QgisInterface
from .strict_georeferencer_dialog import Ui_StrictGeoreferencerDialog
import sympy as sp
import csv

class StrictGeoreferencerDialog(QDialog, Ui_StrictGeoreferencerDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        
        # Дополнительная инициализация
        self.rasterLayersCombo.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.referencePointsFileWidget.setFilter("*.csv")
        # self.pointLayersCombo.setFilters(QgsMapLayerProxyModel.PointLayer)

import os.path


class StrictGeoreferencer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'StrictGeoreferencer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Strict Georeferencing')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('StrictGeoreferencer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/strict_georeferencer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Georeference image'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Strict Georeferencing'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = StrictGeoreferencerDialog()

        canvas = self.iface.mapCanvas()
        self.dlg.projectionSelector.setCrs(canvas.mapSettings().destinationCrs())
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            alpha = 0.0
            omega = 0.0
            kappa = 0.0
            a1 = a2 = a3 = b1 = b2 = b3 = c1 = c2 = c3 = 0.0
            Xs = Ys = Zs = 0.0
            f = x0 = y0 = 0.0
            meanedSquaredError = 10000
            while (meanedSquaredError > 0.1): # TOCHECK: add precision condition for correction vector data 
                A = sp.Matrix([[]])
                L = sp.Matrix()
                fileName = self.dlg.referencePointsFileWidget.filePath()
                with open(fileName, 'r', encoding='utf-8') as file:
                    csv_reader = csv.reader(file)
                    for line in csv_reader:
                        x = float(line[0])  #read data about reference points coordinates on the image from file
                        y = float(line[1]) #same
                        X = float(line[3]) #same but on the surface
                        Y = float(line[4]) #same
                        Z = float(line[5]) #same

                        a1 = calculateA1(alpha, omega, kappa)
                        a2 = calculateA2(alpha, omega, kappa)
                        a3 = calculateA3(alpha, omega, kappa)
                        b1 = calculateB1(alpha, omega, kappa)
                        b2 = calculateB2(alpha, omega, kappa)
                        b3 = calculateB3(alpha, omega, kappa)
                        c1 = calculateC1(alpha, omega, kappa)
                        c2 = calculateC2(alpha, omega, kappa)
                        c3 = calculateC3(alpha, omega, kappa)


                        Xstreak = a1 * x + a2 * y - a3 * f
                        Ystreak = b1 * x + b2 * y - b3 * f
                        Zstreak = c1 * x + c2 * y - c3 * f

                        # a(x-x0) + b(y-y0) + c(f-f0) + d(alpha - alpha0) + e(omega - omega0) + g(kappa - kappa0) + h(Xs - Xs0) + i(Ys - Ys0) + j(Zs - Zs0) + l = v

                        a = (Z - Zs) * (a1 * Zstreak - c1 * Xstreak) / (Zstreak * Zstreak)
                        aStreak = (Z - Zs) * (b1 * Zstreak - c1 * Ystreak) / (Zstreak * Zstreak)

                        b = (Z - Zs) * (a2 * Zstreak - c2 * Xstreak) / (Zstreak * Zstreak)
                        bStreak = (Z - Zs) * (b2 * Zstreak - c2 * Ystreak) / (Zstreak * Zstreak)

                        c = (Z - Zs) * (a3 * Zstreak - c3 * Xstreak) / (Zstreak * Zstreak)
                        cStreak = -(Z - Zs) * (b3 * Zstreak - c3 * Xstreak) / (Zstreak * Zstreak)

                        d = -(Z - Zs) * (Xstreak * Xstreak + Zstreak * Zstreak) / (Zstreak * Zstreak)
                        dStreak = -(Z - Zs) * (Xstreak + Ystreak) / (Zstreak * Zstreak)

                        e = - (Z - Zs) * (Ystreak * Zstreak * sp.sin(alpha) + Xstreak * Ystreak * sp.cos(alpha)) / (Zstreak * Zstreak)
                        eStreak = (Z - Zs) * (Zstreak * ((x * sp.sin(kappa) + y * sp.cos(kappa)) * b3 + f * sp.cos(omega)) - Ystreak * Ystreak * sp.cos(alpha)) / (Zstreak * Zstreak)

                        g = (Z - Zs) * (Zstreak * (a2 * x - a1 * y) - Xstreak * (c2 * x - c1 * y)) / (Zstreak * Zstreak)
                        gStreak = (Z - Zs) * (Zstreak * (b2 * x - b1 *y) - Ystreak * (c2 * x - c1 *y)) / (Zstreak * Zstreak)

                        h = 1
                        hStreak = 0

                        i = 0
                        iStreak = 1

                        j = -(Xstreak / Zstreak)
                        jStreak = -(Ystreak / Zstreak)

                        l = (Xs + (Z -Zs) * Xstreak / Zstreak) - X
                        lStreak = (Ys + (Z - Zs) * Ystreak / Zstreak) - Y

                        A = A.row_insert(A.rows, sp.Matrix([[a, b, c, d, e, g, h, i, j], [aStreak, bStreak, cStreak, dStreak, eStreak, gStreak, hStreak, iStreak, jStreak]]))
                        L = L.row_insert(L.rows, sp.Matrix([[l], [lStreak]]))
                correctionVector = A.solve(-L)
                
                x0 += correctionVector.row(0)
                y0 += correctionVector.row(1)
                f += correctionVector.row(2)
                alpha += correctionVector.row(3)
                omega += correctionVector.row(4)
                kappa += correctionVector.row(5)
                Xs += correctionVector.row(6)
                Ys += correctionVector.row(7)
                Zs += correctionVector.row(8)
                meanedSquaredError = (correctionVector.row(0)*correctionVector.row(0) + correctionVector.row(1)*correctionVector.row(1) + correctionVector.row(2)*correctionVector.row(2) +
                                     correctionVector.row(3)*correctionVector.row(3) + correctionVector.row(4)*correctionVector.row(4) + correctionVector.row(5)*correctionVector.row(5) +
                                     correctionVector.row(6)*correctionVector.row(6) + correctionVector.row(7)*correctionVector.row(7) + correctionVector.row(8)*correctionVector.row(8)) / correctionVector.rows() #MSE
                
                
def calculateA1(alpha, omega, kappa):
    return sp.cos(alpha) * sp.cos(kappa) - sp.sin(alpha) * sp.sin(omega) * sp.sin(kappa)
    
def calculateA2(alpha, omega, kappa):
    return -sp.cos(alpha) * sp.sin(kappa) - sp.sin(alpha) * sp.sin(omega) * sp.cos(kappa)

def calculateA3(alpha, omega, kappa):
    return -sp.sin(alpha) * sp.cos(omega)
    
def calculateB1(alpha, omega, kappa):
    return sp.cos(omega) * sp.sin(kappa)
    
def calculateB2(alpha, omega, kappa):
    return sp.cos(omega) * sp.cos(kappa)

def calculateB3(alpha, omega, kappa):
    return -sp.sin(omega)
    
def calculateC1(alpha, omega, kappa):
    return sp.sin(alpha) * sp.cos(kappa) + sp.cos(alpha) * sp.sin(omega) * sp.sin(kappa)
    
def calculateC2(alpha, omega, kappa):
    return -sp.sin(alpha) * sp.sin(kappa) + sp.cos(alpha) * sp.sin(omega) * sp.cos(kappa)
    
def calculateC3(alpha, omega, kappa):
    return sp.cos(alpha) * sp.cos(omega)


                
